html
  [head]
  body
    [topbar]
    div .container
      section
        div .page-header h1 "XML is dead... Long live XML!"
        div #instructions .modal .hide
          div .modal-header h2 "Quick Reference"
          div .modal-body [instructions]
        div #error .alert-message .error .fade .in @style: "display: none;"
          p "Error Loading Request... Try again?"
        div .row
          div .span16 
            span #reference .label .notice "Reference"
        div .row
          [compiler]
          [output]
    footer p "&copy; Philip Cali 2011" is unescaped
---
[head]:
  head
    meta { charset: "utf-8" }
    title [try]
    [styles]
    script { 
      type: "text/javascript", 
      src: "http://code.jquery.com/jquery-1.6.4.min.js"
    }
    script {
      type: "text/javascript",
      src: "http://twitter.github.com/bootstrap/1.3.0/bootstrap-modal.js"
    }
    script {
      type: "text/javascript",
      src: "http://twitter.github.com/bootstrap/1.3.0/bootstrap-alerts.js"
    }
    [javascript]

[topbar]:
  div .topbar
    div .fill
      div .container
        a .brand { href: "/" } [try]
        ul .nav
          li .active a { href: "/" } "Home"
          li a { href: "https://raw.github.com/philcali/try-lmxml/master/src/main/webapp/index.lmxml"}
              "Source"
          li a { href: "https://github.com/philcali" } "Author"

[instructions]:
  ul
    li "Nodes are single words without spaces"
    li "Quoted string are quoted"
    li "Multi-line strings are fenced in with " code "```" 
    li "Indention is important denoting sibling nodes and new-lines (default is 2 spaces)"
    li "JSON-style attributes"
    li "Attributes can be prefixed with " code "@"
    li "Class attributes can be simply prefixed with '.'"
    li "Multiple class attributes can be string together: " code ".label .notice"
    li "Id attributes can be simply prefixed with '#'"
    li "Markdown Indirect link style templates"
    li "Indirect definitions are delimited from main document by " code "---"
    li "Unparsed text is suffixed with " code "is unescaped"

[compiler]:
  div .span8
    form { method: "POST" }
      textarea .lmxml {
        autofocus: "autofocus",
        name: "lmxml-input"
      }
        ```
data
   persons
     person { name: "Tomcar", age: "999" }
     person { name: "Cartom", age: "111" }
   places
     place "My House"
     place "Their Home"
        ```
      input #run_link { 
        class: "btn primary", 
        type: "submit", 
        value: "Run Code"
      }
      p small "Also run with ctrl / cmd (on Mac) + enter"

[output]:
  div .span8
    pre .lmxml_output
      ```
<data>
   <persons>
     <person name="Tomcar" age="999"></person>
     <person name="Cartom" age="111"></person>
   </persons>
   <places>
     <place>My House</place>
     <place>Their Home</place>
   </places>
</data>
      ```

[try]: "Try LMXML"

[javascript]: 
  script { type: "text/javascript" }
    ```
//<![CDATA[
$(document).ready (function() {

  $("#instructions").modal({ keyboard: true, backdrop: true});

  $(".lmxml").ajaxError(function() {
    $(this).attr("disabled", false);
    $("#error").slideDown('fast').delay(2000).slideUp('fast');
  });

  $("#run_link").click(function() {
    runCode();
    return false;
  });

  $("#reference").click(function() {
    $("#instructions").modal('show');
  });

  var tab = "  ";

  $(".lmxml").keydown(function(event) {
    var keyCode = event.keyCode || event.which;

    var t = event.target
    var start = t.selectionStart

    if (keyCode == 9) {
      event.preventDefault();
      
      if (t.selectionStart == t.selectionEnd) {
        t.value = t.value.slice(0, start).concat(tab).concat( 
                  t.value.slice(start, t.value.length));
        t.selectionStart = t.selectionEnd = start + tab.length;
      }
    } else if (keyCode == 8 && t.value.slice(start - tab.length, start) == tab) {
      event.preventDefault();

      if (t.selectionStart == t.selectionEnd) {
        t.value = t.value.slice(0, start - tab.length).concat(
                  t.value.slice(start, t.value.length));
        t.selectionStart = t.selectionEnd = start - tab.length;
      } else {
        t.value = t.value.slice(0, start).concat(
                  t.value.slice(t.selectionEnd, t.value.length));
      }
    }

    if (event.metaKey == 1 && keyCode == 13) {
      event.preventDefault();

      runCode();
    }
  });

  function runCode() {
    $(".lmxml").attr("disabled", true);

    $.post("/", { "lmxml-input": $(".lmxml").val() }, function(data) {
      $(".lmxml_output").text(data);
      $(".lmxml").attr("disabled", false);
    });
  }
});
//]]
    ``` is unescaped

[styles]:
  link { rel: "stylesheet", href: "http://twitter.github.com/bootstrap/1.3.0/bootstrap.min.css" }
  style { type: "text/css" }
    ```
body {
  padding: 60px; 
}

.row {
  margin-bottom: 10px;
}

.hero-unit {
  margin-bottom: 20px;
}

#reference:hover {
  cursor: pointer;
}

pre {
  font-size: 14px;
}

textarea {
  width: 459px;
  height: 320px;
  border: none;
  font-family: Monaco;
  font-size: 14px;
  resize: none;
}
    ```
